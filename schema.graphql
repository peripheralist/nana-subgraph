type ProtocolLog @entity {
  id: ID!
  projectsCount: Int!
  volume: BigInt!
  volumeUSD: BigInt!
  volumeRedeemed: BigInt!
  volumeRedeemedUSD: BigInt!
  paymentsCount: Int!
  redeemCount: Int!
  erc20Count: Int!
  trendingLastUpdatedTimestamp: Int!
  oldestTrendingPayEvent: PayEvent
}

type _Schema_
  @fulltext(
    name: "projectSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Project", fields: [{ name: "handle" }] }]
  )

type ProjectCreateEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!
}

type Project @entity {
  id: ID!
  projectId: Int!
  handle: String
  deployer: Bytes
  metadataUri: String
  owner: Bytes!
  creator: Bytes!
  createdAt: Int!
  paymentsCount: Int!
  contributorsCount: Int!
  redeemCount: Int!
  volume: BigInt!
  volumeUSD: BigInt!
  redeemVolume: BigInt!
  redeemVolumeUSD: BigInt!
  currentBalance: BigInt!
  tokenSupply: BigInt!
  trendingScore: BigInt!
  trendingVolume: BigInt!
  trendingPaymentsCount: Int!
  createdWithinTrendingWindow: Boolean

  nftsMintedCount: Int! # only if project has jb721DelegateTokens

  # Derived event entities
  addToBalanceEvents: [AddToBalanceEvent!]! @derivedFrom(field: "project")
  burnEvents: [BurnEvent!]! @derivedFrom(field: "project")
  deployedERC20Events: [DeployedERC20Event!]! @derivedFrom(field: "project")
  distributePayoutsEvents: [DistributePayoutsEvent!]!
    @derivedFrom(field: "project")
  distributeReservedTokensEvents: [DistributeReservedTokensEvent!]!
    @derivedFrom(field: "project")
  distributeToPayoutSplitEvents: [DistributeToPayoutSplitEvent!]!
    @derivedFrom(field: "project")
  distributeToReservedTokenSplitEvents: [DistributeToReservedTokenSplitEvent!]!
    @derivedFrom(field: "project")
  mintTokensEvents: [MintTokensEvent!]! @derivedFrom(field: "project")
  payEvents: [PayEvent!]! @derivedFrom(field: "project")
  projectEvents: [ProjectEvent!]! @derivedFrom(field: "project")
  redeemEvents: [RedeemEvent!]! @derivedFrom(field: "project")
  useAllowanceEvents: [UseAllowanceEvent!]! @derivedFrom(field: "project")
  jb721DelegateTokens: [NFT!]! @derivedFrom(field: "project")
  nftCollections: [NFTCollection!]! @derivedFrom(field: "project")
  participants: [Participant!]! @derivedFrom(field: "project")
  permissionsHolders: [PermissionsHolder!]! @derivedFrom(field: "project")
}

type Participant @entity {
  id: ID!
  project: Project!
  projectId: Int!
  address: Bytes!
  wallet: Wallet!
  volume: BigInt!
  volumeUSD: BigInt!
  lastPaidTimestamp: Int!
  paymentsCount: Int!
  balance: BigInt!
  stakedBalance: BigInt!
  erc20Balance: BigInt!
  jb721DelegateTokens: [NFT!]! @derivedFrom(field: "owner")
}

type Wallet @entity {
  id: ID!
  volume: BigInt!
  volumeUSD: BigInt!
  lastPaidTimestamp: Int!
  participants: [Participant!]! @derivedFrom(field: "wallet")
}


type ProjectEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  # terminal: Bytes # Only terminal events
  timestamp: Int!
  from: Bytes!
  caller: Bytes

  # Conditional properties. Only one of these properties should exist. This is a helper entity that makes it possible to query all "project events" for a project.
  payEvent: PayEvent
  addToBalanceEvent: AddToBalanceEvent
  mintTokensEvent: MintTokensEvent
  redeemEvent: RedeemEvent
  deployedERC20Event: DeployedERC20Event
  projectCreateEvent: ProjectCreateEvent
  distributePayoutsEvent: DistributePayoutsEvent
  distributeReservedTokensEvent: DistributeReservedTokensEvent
  distributeToReservedTokenSplitEvent: DistributeToReservedTokenSplitEvent
  distributeToPayoutSplitEvent: DistributeToPayoutSplitEvent
  useAllowanceEvent: UseAllowanceEvent
  burnEvent: BurnEvent
}


type PayEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  # terminal: Bytes!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  # isDistribution: Boolean!
  distributionFromProjectId: Int
  beneficiary: Bytes!
  amount: BigInt!
  amountUSD: BigInt
  note: String!
  feeFromProject: Int # Indicates payment is a fee from project with this ID
  beneficiaryTokenCount: BigInt!
}


type AddToBalanceEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  amount: BigInt!
  amountUSD: BigInt
  note: String
}


type MintTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  beneficiary: Bytes!
  amount: BigInt!
  memo: String!
}


type RedeemEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  metadata: Bytes
  holder: Bytes!
  beneficiary: Bytes!
  redeemCount: BigInt!
  reclaimAmount: BigInt!
  reclaimAmountUSD: BigInt
}


type DeployedERC20Event @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  symbol: String!
  address: Bytes!
}


type ENSNode @entity {
  id: ID!
  projectId: Int
}


type BurnEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes

  holder: Bytes!
  amount: BigInt!
  stakedAmount: BigInt!
  erc20Amount: BigInt!
}


type NFT @entity {
  id: ID!
  tokenId: BigInt!
  collection: NFTCollection!
  tier: NFTTier!
  project: Project!
  projectId: Int!
  category: Int!

  # dynamic fields
  owner: Participant!
  tokenUri: String!
}

type NFTCollection @entity {
  id: ID!
  address: Bytes!
  project: Project!
  projectId: Int!
  name: String!
  symbol: String!
  createdAt: Int!

  tiers: [NFTTier!]! @derivedFrom(field: "collection")
  nfts: [NFT!]! @derivedFrom(field: "collection")
}

type NFTTier @entity {
  id: ID!
  collection: NFTCollection!
  tierId: Int!
  allowOwnerMint: Boolean!
  price: BigInt!
  encodedIpfsUri: Bytes
  resolvedUri: String
  initialSupply: BigInt!
  cannotBeRemoved: Boolean!
  remainingSupply: BigInt!
  transfersPausable: Boolean!
  votingUnits: BigInt!
  createdAt: Int!
  category: Int!
  reserveFrequency: Int!
  reserveBeneficiary: Bytes!
  svg: String # Only used for bannyverse

  nfts: [NFT!]! @derivedFrom(field: "tier")
}

type DistributePayoutsEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  amount: BigInt!
  amountUSD: BigInt
  amountPaidOut: BigInt!
  amountPaidOutUSD: BigInt
  rulesetCycleNumber: BigInt!
  rulesetId: BigInt!
  fee: BigInt!
  feeUSD: BigInt
  splitDistributions: [DistributeToPayoutSplitEvent!]!
    @derivedFrom(field: "distributePayoutsEvent")
}

type DistributeToPayoutSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  amount: BigInt!
  amountUSD: BigInt
  distributePayoutsEvent: DistributePayoutsEvent!

  # Split struct properties below
  preferAddToBalance: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
}

type DistributeReservedTokensEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  rulesetCycleNumber: Int!
  tokenCount: BigInt!
  splitDistributions: [DistributeToReservedTokenSplitEvent!]!
    @derivedFrom(field: "distributeReservedTokensEvent")
}

type DistributeToReservedTokenSplitEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  tokenCount: BigInt!
  distributeReservedTokensEvent: DistributeReservedTokensEvent!

  # Split struct properties below
  preferAddToBalance: Boolean!
  percent: Int!
  splitProjectId: Int!
  beneficiary: Bytes!
  lockedUntil: Int!
}

type UseAllowanceEvent @entity {
  id: ID!
  project: Project!
  projectId: Int!
  timestamp: Int!
  txHash: Bytes!
  from: Bytes!
  caller: Bytes!

  rulesetId: BigInt!
  rulesetCycleNumber: Int!
  beneficiary: Bytes!
  amount: BigInt!
  amountUSD: BigInt
  distributedAmount: BigInt!
  distributedAmountUSD: BigInt
  netDistributedamount: BigInt!
  netDistributedamountUSD: BigInt
  memo: String!
}

type PermissionsHolder @entity {
  id: ID!
  account: Bytes!
  projectId: Int!
  project: Project!
  permissions: [Int!]!
  operator: Bytes!
}

type StoreAutoMintAmountEvent @entity {
  id: ID!
  revnetId: BigInt!
  stageId: BigInt!
  beneficiary: Bytes!
  count: BigInt!
  caller: Bytes!
}

type DecorateBannyEvent @entity {
  id: ID!
  timestamp: Int!
  txHash: Bytes!
  caller: Bytes!

  nakedBannyId: BigInt!
  outfitIds: [BigInt!]!
  worldId: BigInt!
}